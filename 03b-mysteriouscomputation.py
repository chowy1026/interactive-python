# Mystery computation in Python
# Takes input n and computes output named result

"""
Given any initial natural number, consider the_
 sequence of numbers generated by repeatedly following the rule:

divide by two if the number is even or
multiply by 3 and add 1 if the number is odd.
The Collatz conjecture states that this sequence_
always terminates at 1. For example, the sequence_
generated by 23 is:

23, 70, 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1
"""


import simplegui


# global state


# helper functions

def init(start):
    """Initializes n."""
    global n, nums
    n = start
    nums = [start]
    print "Input is", n
    print "List is", nums
    
def get_next(current):
    """???  Part of mystery computation."""
    global n, nums
    if (current % 2 > 0):	#if odd
        n = (current * 3) + 1
        nums.append(n)

    else: #if even
        n =  (current / 2)
        nums.append(n)
    print "Input is", n
    print "List is", nums
 
# timer callback

def update():
    """???  Part of mystery computation."""
    if (n != 1): 
        get_next(n)
    else: 
        timer.stop()
        nums.sort(reverse=True)
        print "Maximum of list is", nums[0]

# register event handlers

timer = simplegui.create_timer(1, update)

# start program

init(217)
timer.start()

